import * as z from 'zod/v4';
declare const ConnectionOptionsSchema: z.ZodObject<{
    pollingIntervalInMilliseconds: z.ZodOptional<z.ZodNumber>;
    timeoutInMilliseconds: z.ZodOptional<z.ZodNumber>;
}, z.core.$strip>;
export type ConnectionOptions = z.infer<typeof ConnectionOptionsSchema>;
declare const WindowOptionsSchema: z.ZodObject<{
    position: z.ZodEnum<{
        center: "center";
        "top-right": "top-right";
    }>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    features: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
export type WindowOptions = z.infer<typeof WindowOptionsSchema>;
declare const OnDisconnectSchema: z.ZodOptional<z.ZodCustom<z.core.$InferInnerFunctionType<z.core.$ZodFunctionArgs, z.ZodVoid>, z.core.$InferInnerFunctionType<z.core.$ZodFunctionArgs, z.ZodVoid>>>;
export type OnDisconnect = z.infer<typeof OnDisconnectSchema>;
declare const RelyingPartyHostSchema: z.ZodOptional<z.ZodURL>;
export type RelyingPartyHost = z.infer<typeof RelyingPartyHostSchema>;
export declare const RelyingPartyOptionsSchema: z.ZodObject<{
    url: z.ZodURL;
    windowOptions: z.ZodOptional<z.ZodUnion<readonly [z.ZodObject<{
        position: z.ZodEnum<{
            center: "center";
            "top-right": "top-right";
        }>;
        width: z.ZodNumber;
        height: z.ZodNumber;
        features: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>, z.ZodString]>>;
    connectionOptions: z.ZodOptional<z.ZodObject<{
        pollingIntervalInMilliseconds: z.ZodOptional<z.ZodNumber>;
        timeoutInMilliseconds: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>>;
    onDisconnect: z.ZodOptional<z.ZodCustom<z.core.$InferInnerFunctionType<z.core.$ZodFunctionArgs, z.ZodVoid>, z.core.$InferInnerFunctionType<z.core.$ZodFunctionArgs, z.ZodVoid>>>;
    host: z.ZodOptional<z.ZodURL>;
}, z.core.$strip>;
export type RelyingPartyOptions = z.infer<typeof RelyingPartyOptionsSchema>;
export {};
