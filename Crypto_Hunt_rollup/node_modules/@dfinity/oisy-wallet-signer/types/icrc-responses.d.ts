import * as z from 'zod/v4';
declare const IcrcScopeMethodSchema: z.ZodObject<{
    method: z.ZodEnum<{
        icrc27_accounts: "icrc27_accounts";
        icrc49_call_canister: "icrc49_call_canister";
    }>;
}, z.core.$strip>;
export type IcrcScopeMethod = z.infer<typeof IcrcScopeMethodSchema>;
export declare const IcrcScopeSchema: z.ZodObject<{
    scope: z.ZodObject<{
        method: z.ZodEnum<{
            icrc27_accounts: "icrc27_accounts";
            icrc49_call_canister: "icrc49_call_canister";
        }>;
    }, z.core.$strip>;
    state: z.ZodEnum<{
        denied: "denied";
        granted: "granted";
        ask_on_use: "ask_on_use";
    }>;
}, z.core.$strict>;
export type IcrcScope = z.infer<typeof IcrcScopeSchema>;
export declare const IcrcScopesArraySchema: z.ZodArray<z.ZodObject<{
    scope: z.ZodObject<{
        method: z.ZodEnum<{
            icrc27_accounts: "icrc27_accounts";
            icrc49_call_canister: "icrc49_call_canister";
        }>;
    }, z.core.$strip>;
    state: z.ZodEnum<{
        denied: "denied";
        granted: "granted";
        ask_on_use: "ask_on_use";
    }>;
}, z.core.$strict>>;
export type IcrcScopesArray = z.infer<typeof IcrcScopesArraySchema>;
export declare const IcrcScopesSchema: z.ZodObject<{
    scopes: z.ZodArray<z.ZodObject<{
        scope: z.ZodObject<{
            method: z.ZodEnum<{
                icrc27_accounts: "icrc27_accounts";
                icrc49_call_canister: "icrc49_call_canister";
            }>;
        }, z.core.$strip>;
        state: z.ZodEnum<{
            denied: "denied";
            granted: "granted";
            ask_on_use: "ask_on_use";
        }>;
    }, z.core.$strict>>;
}, z.core.$strict>;
export type IcrcScopes = z.infer<typeof IcrcScopesSchema>;
export declare const IcrcScopesResponseSchema: z.ZodObject<{
    id: z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodNull]>;
    jsonrpc: z.ZodLiteral<"2.0">;
    result: z.ZodOptional<z.ZodObject<{
        scopes: z.ZodArray<z.ZodObject<{
            scope: z.ZodObject<{
                method: z.ZodEnum<{
                    icrc27_accounts: "icrc27_accounts";
                    icrc49_call_canister: "icrc49_call_canister";
                }>;
            }, z.core.$strip>;
            state: z.ZodEnum<{
                denied: "denied";
                granted: "granted";
                ask_on_use: "ask_on_use";
            }>;
        }, z.core.$strict>>;
    }, z.core.$strict>>;
    error: z.ZodOptional<z.ZodObject<{
        code: z.ZodUnion<readonly [z.ZodNumber, z.ZodEnum<typeof import("./rpc").RpcErrorCode>]>;
        message: z.ZodString;
        data: z.ZodOptional<z.ZodNever>;
    }, z.core.$strip>>;
}, z.core.$strict>;
export type IcrcScopesResponse = z.infer<typeof IcrcScopesResponseSchema>;
export declare const IcrcSupportedStandardsSchema: z.ZodArray<z.ZodObject<{
    name: z.ZodEnum<{
        "ICRC-21": "ICRC-21";
        "ICRC-25": "ICRC-25";
        "ICRC-27": "ICRC-27";
        "ICRC-29": "ICRC-29";
        "ICRC-49": "ICRC-49";
    }>;
    url: z.ZodURL;
}, z.core.$strict>>;
export type IcrcSupportedStandards = z.infer<typeof IcrcSupportedStandardsSchema>;
export declare const IcrcSupportedStandardsResponseSchema: z.ZodObject<{
    id: z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodNull]>;
    jsonrpc: z.ZodLiteral<"2.0">;
    result: z.ZodOptional<z.ZodObject<{
        supportedStandards: z.ZodArray<z.ZodObject<{
            name: z.ZodEnum<{
                "ICRC-21": "ICRC-21";
                "ICRC-25": "ICRC-25";
                "ICRC-27": "ICRC-27";
                "ICRC-29": "ICRC-29";
                "ICRC-49": "ICRC-49";
            }>;
            url: z.ZodURL;
        }, z.core.$strict>>;
    }, z.core.$strip>>;
    error: z.ZodOptional<z.ZodObject<{
        code: z.ZodUnion<readonly [z.ZodNumber, z.ZodEnum<typeof import("./rpc").RpcErrorCode>]>;
        message: z.ZodString;
        data: z.ZodOptional<z.ZodNever>;
    }, z.core.$strip>>;
}, z.core.$strict>;
export type IcrcSupportedStandardsResponse = z.infer<typeof IcrcSupportedStandardsResponseSchema>;
export declare const IcrcReadyResponseSchema: z.ZodObject<{
    id: z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodNull]>;
    jsonrpc: z.ZodLiteral<"2.0">;
    result: z.ZodOptional<z.ZodLiteral<"ready">>;
    error: z.ZodOptional<z.ZodObject<{
        code: z.ZodUnion<readonly [z.ZodNumber, z.ZodEnum<typeof import("./rpc").RpcErrorCode>]>;
        message: z.ZodString;
        data: z.ZodOptional<z.ZodNever>;
    }, z.core.$strip>>;
}, z.core.$strict>;
export type IcrcReadyResponse = z.infer<typeof IcrcReadyResponseSchema>;
export declare const IcrcAccountsResponseSchema: z.ZodObject<{
    id: z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodNull]>;
    jsonrpc: z.ZodLiteral<"2.0">;
    result: z.ZodOptional<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            owner: z.ZodString;
            subaccount: z.ZodOptional<z.ZodString>;
        }, z.core.$strict>>;
    }, z.core.$strip>>;
    error: z.ZodOptional<z.ZodObject<{
        code: z.ZodUnion<readonly [z.ZodNumber, z.ZodEnum<typeof import("./rpc").RpcErrorCode>]>;
        message: z.ZodString;
        data: z.ZodOptional<z.ZodNever>;
    }, z.core.$strip>>;
}, z.core.$strict>;
export type IcrcAccountsResponse = z.infer<typeof IcrcAccountsResponseSchema>;
export declare const IcrcCallCanisterResultSchema: z.ZodObject<{
    contentMap: z.ZodString;
    certificate: z.ZodString;
}, z.core.$strict>;
export type IcrcCallCanisterResult = z.infer<typeof IcrcCallCanisterResultSchema>;
export declare const IcrcCallCanisterResponseSchema: z.ZodObject<{
    id: z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodNull]>;
    jsonrpc: z.ZodLiteral<"2.0">;
    result: z.ZodOptional<z.ZodObject<{
        contentMap: z.ZodString;
        certificate: z.ZodString;
    }, z.core.$strict>>;
    error: z.ZodOptional<z.ZodObject<{
        code: z.ZodUnion<readonly [z.ZodNumber, z.ZodEnum<typeof import("./rpc").RpcErrorCode>]>;
        message: z.ZodString;
        data: z.ZodOptional<z.ZodNever>;
    }, z.core.$strip>>;
}, z.core.$strict>;
export type IcrcCallCanisterResponse = z.infer<typeof IcrcCallCanisterResponseSchema>;
export {};
