import type { RecordClass, VariantClass } from '@dfinity/candid/lib/cjs/idl';
import type { IcrcCallCanisterRequestParams } from '../types/icrc-requests';
import type { IcrcCallCanisterResult } from '../types/icrc-responses';
import type { RelyingPartyHost } from '../types/relying-party-options';
export declare const assertCallResponse: ({ params: { method, arg, canisterId, sender }, result: { contentMap } }: {
    params: IcrcCallCanisterRequestParams;
    result: IcrcCallCanisterResult;
}) => void;
export declare const decodeResponse: <T>({ params: { canisterId }, result: { certificate: cert, contentMap }, resultRecordClass, host }: {
    params: IcrcCallCanisterRequestParams;
    result: IcrcCallCanisterResult;
    resultRecordClass: RecordClass | VariantClass;
    host?: RelyingPartyHost;
}) => Promise<T>;
