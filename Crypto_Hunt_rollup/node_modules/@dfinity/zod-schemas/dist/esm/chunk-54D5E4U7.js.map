{
  "version": 3,
  "sources": ["../../src/principal.ts"],
  "sourcesContent": ["import { Principal } from \"@dfinity/principal\";\nimport * as z from \"zod/v4\";\n\n/**\n * Zod schema to validate a string as a valid textual representation of a Principal.\n *\n * This schema checks if the provided string can be converted into a `Principal` instance.\n * If the conversion fails, validation will return an error message.\n *\n * @example\n * ```typescript\n * const result = PrincipalTextSchema.safeParse('aaaaa-aa');\n * console.log(result.success); // true or false\n * ```\n */\nexport const PrincipalTextSchema = z.string().refine(\n  (principal) => {\n    try {\n      Principal.fromText(principal);\n      return true;\n    } catch (_err: unknown) {\n      return false;\n    }\n  },\n  {\n    error: \"Invalid textual representation of a Principal.\",\n  },\n);\n\nexport type PrincipalText = z.infer<typeof PrincipalTextSchema>;\n"],
  "mappings": "AAAA,OAAS,aAAAA,MAAiB,qBAC1B,UAAYC,MAAO,SAcZ,IAAMC,EAAwB,SAAO,EAAE,OAC3CC,GAAc,CACb,GAAI,CACF,OAAAH,EAAU,SAASG,CAAS,EACrB,EACT,MAAwB,CACtB,MAAO,EACT,CACF,EACA,CACE,MAAO,gDACT,CACF",
  "names": ["Principal", "z", "PrincipalTextSchema", "principal"]
}
